/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FactraInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyListedInvoice"
      | "cancelListing"
      | "createInvoice"
      | "fundInvoice"
      | "getInvoice"
      | "getInvoiceCount"
      | "invoiceCounter"
      | "invoiceNFT"
      | "invoices"
      | "listInvoiceForSale"
      | "listingPrice"
      | "markAsPaid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InvoiceCreated"
      | "InvoiceFunded"
      | "InvoiceListed"
      | "InvoicePaid"
      | "InvoiceResold"
      | "InvoiceSaleCancelled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyListedInvoice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createInvoice",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundInvoice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invoices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listInvoiceForSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsPaid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyListedInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInvoice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invoiceNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invoices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listInvoiceForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markAsPaid", data: BytesLike): Result;
}

export namespace InvoiceCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    issuer: AddressLike,
    amount: BigNumberish,
    dueDate: BigNumberish,
    businessName: string,
    sector: string,
    rating: BigNumberish,
    discountRate: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    issuer: string,
    amount: bigint,
    dueDate: bigint,
    businessName: string,
    sector: string,
    rating: bigint,
    discountRate: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    id: bigint;
    issuer: string;
    amount: bigint;
    dueDate: bigint;
    businessName: string;
    sector: string;
    rating: bigint;
    discountRate: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceFundedEvent {
  export type InputTuple = [
    id: BigNumberish,
    buyer: AddressLike,
    amount: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    buyer: string,
    amount: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    id: bigint;
    buyer: string;
    amount: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceListedEvent {
  export type InputTuple = [
    id: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [id: bigint, seller: string, price: bigint];
  export interface OutputObject {
    id: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoicePaidEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceResoldEvent {
  export type InputTuple = [
    id: BigNumberish,
    oldBuyer: AddressLike,
    newBuyer: AddressLike,
    price: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    oldBuyer: string,
    newBuyer: string,
    price: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    id: bigint;
    oldBuyer: string;
    newBuyer: string;
    price: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceSaleCancelledEvent {
  export type InputTuple = [id: BigNumberish, seller: AddressLike];
  export type OutputTuple = [id: bigint, seller: string];
  export interface OutputObject {
    id: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Factra extends BaseContract {
  connect(runner?: ContractRunner | null): Factra;
  waitForDeployment(): Promise<this>;

  interface: FactraInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyListedInvoice: TypedContractMethod<[id: BigNumberish], [void], "payable">;

  cancelListing: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  createInvoice: TypedContractMethod<
    [
      amount: BigNumberish,
      dueDate: BigNumberish,
      businessName: string,
      sector: string,
      rating: BigNumberish,
      discountRate: BigNumberish,
      tokenURI: string
    ],
    [bigint],
    "nonpayable"
  >;

  fundInvoice: TypedContractMethod<[id: BigNumberish], [void], "payable">;

  getInvoice: TypedContractMethod<
    [id: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ]
    ],
    "view"
  >;

  getInvoiceCount: TypedContractMethod<[], [bigint], "view">;

  invoiceCounter: TypedContractMethod<[], [bigint], "view">;

  invoiceNFT: TypedContractMethod<[], [string], "view">;

  invoices: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        issuer: string;
        buyer: string;
        amount: bigint;
        dueDate: bigint;
        status: bigint;
        businessName: string;
        sector: string;
        rating: bigint;
        discountRate: bigint;
      }
    ],
    "view"
  >;

  listInvoiceForSale: TypedContractMethod<
    [id: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listingPrice: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  markAsPaid: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyListedInvoice"
  ): TypedContractMethod<[id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createInvoice"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      dueDate: BigNumberish,
      businessName: string,
      sector: string,
      rating: BigNumberish,
      discountRate: BigNumberish,
      tokenURI: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundInvoice"
  ): TypedContractMethod<[id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getInvoice"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInvoiceCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "invoiceCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "invoiceNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "invoices"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        issuer: string;
        buyer: string;
        amount: bigint;
        dueDate: bigint;
        status: bigint;
        businessName: string;
        sector: string;
        rating: bigint;
        discountRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listInvoiceForSale"
  ): TypedContractMethod<
    [id: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listingPrice"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "markAsPaid"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "InvoiceCreated"
  ): TypedContractEvent<
    InvoiceCreatedEvent.InputTuple,
    InvoiceCreatedEvent.OutputTuple,
    InvoiceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceFunded"
  ): TypedContractEvent<
    InvoiceFundedEvent.InputTuple,
    InvoiceFundedEvent.OutputTuple,
    InvoiceFundedEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceListed"
  ): TypedContractEvent<
    InvoiceListedEvent.InputTuple,
    InvoiceListedEvent.OutputTuple,
    InvoiceListedEvent.OutputObject
  >;
  getEvent(
    key: "InvoicePaid"
  ): TypedContractEvent<
    InvoicePaidEvent.InputTuple,
    InvoicePaidEvent.OutputTuple,
    InvoicePaidEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceResold"
  ): TypedContractEvent<
    InvoiceResoldEvent.InputTuple,
    InvoiceResoldEvent.OutputTuple,
    InvoiceResoldEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceSaleCancelled"
  ): TypedContractEvent<
    InvoiceSaleCancelledEvent.InputTuple,
    InvoiceSaleCancelledEvent.OutputTuple,
    InvoiceSaleCancelledEvent.OutputObject
  >;

  filters: {
    "InvoiceCreated(uint256,address,uint256,uint256,string,string,uint8,uint8,uint256)": TypedContractEvent<
      InvoiceCreatedEvent.InputTuple,
      InvoiceCreatedEvent.OutputTuple,
      InvoiceCreatedEvent.OutputObject
    >;
    InvoiceCreated: TypedContractEvent<
      InvoiceCreatedEvent.InputTuple,
      InvoiceCreatedEvent.OutputTuple,
      InvoiceCreatedEvent.OutputObject
    >;

    "InvoiceFunded(uint256,address,uint256,uint256)": TypedContractEvent<
      InvoiceFundedEvent.InputTuple,
      InvoiceFundedEvent.OutputTuple,
      InvoiceFundedEvent.OutputObject
    >;
    InvoiceFunded: TypedContractEvent<
      InvoiceFundedEvent.InputTuple,
      InvoiceFundedEvent.OutputTuple,
      InvoiceFundedEvent.OutputObject
    >;

    "InvoiceListed(uint256,address,uint256)": TypedContractEvent<
      InvoiceListedEvent.InputTuple,
      InvoiceListedEvent.OutputTuple,
      InvoiceListedEvent.OutputObject
    >;
    InvoiceListed: TypedContractEvent<
      InvoiceListedEvent.InputTuple,
      InvoiceListedEvent.OutputTuple,
      InvoiceListedEvent.OutputObject
    >;

    "InvoicePaid(uint256)": TypedContractEvent<
      InvoicePaidEvent.InputTuple,
      InvoicePaidEvent.OutputTuple,
      InvoicePaidEvent.OutputObject
    >;
    InvoicePaid: TypedContractEvent<
      InvoicePaidEvent.InputTuple,
      InvoicePaidEvent.OutputTuple,
      InvoicePaidEvent.OutputObject
    >;

    "InvoiceResold(uint256,address,address,uint256,uint256)": TypedContractEvent<
      InvoiceResoldEvent.InputTuple,
      InvoiceResoldEvent.OutputTuple,
      InvoiceResoldEvent.OutputObject
    >;
    InvoiceResold: TypedContractEvent<
      InvoiceResoldEvent.InputTuple,
      InvoiceResoldEvent.OutputTuple,
      InvoiceResoldEvent.OutputObject
    >;

    "InvoiceSaleCancelled(uint256,address)": TypedContractEvent<
      InvoiceSaleCancelledEvent.InputTuple,
      InvoiceSaleCancelledEvent.OutputTuple,
      InvoiceSaleCancelledEvent.OutputObject
    >;
    InvoiceSaleCancelled: TypedContractEvent<
      InvoiceSaleCancelledEvent.InputTuple,
      InvoiceSaleCancelledEvent.OutputTuple,
      InvoiceSaleCancelledEvent.OutputObject
    >;
  };
}
